
@inject IBookRepository Repository

@if(Book is not null)
{
    <EditForm Enhance="true" method="post" FormName="AddOrEditBookForm" OnValidSubmit="AddOrEditBook" Model="Book" autocomplete="off">
        <div class="bg-warning rounded-3 p-2 mb-2">
            <h3>Livro: @Book.Title</h3>
            <span>ID: @Book.Id</span>
            @if (IsEditMode)
            {
                
             <input type="hidden" name="Book.Id" value="@Book.Id" />
            }
        </div>

        <div class="mb-3 mt-3">
            <label for="title" class="form-label">
                Titulo do Livro
            </label>
            <InputText id="title" @bind-Value="Book.Title" class="form-control shadow-none" />
        </div>

        <div class="mb-3">
            <label for="author" class="form-label">
                Autor
            </label>
            <InputText id="author" @bind-Value="Book.Author" class="form-control shadow-none" />
        </div>

        <div class="mb-3">
            <label for="publication-date" class="form-label">
                Data de Publicacao
            </label>
            <InputDate id="publication-date" @bind-Value="Book.PublicationDate" class="form-control shadow-none" />
        </div>

        <div class="mb-3">
            <label for="category" class="form-label">
                Caterogia
            </label>
            <InputSelect id="category" @bind-Value="Book.Category" class="form-control shadow-none">
                <option value="0">
                    Selecione a categoria
                </option>
                @foreach (var category in Enum.GetValues(typeof(Category)))
                {
                    <option value="@category">
                        @category.ToString()
                    </option>

                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <button class="btn btn-primary shadow-none ms-3">
                Cadastrar
            </button>
            <a href="/" class="btn btn-secondary shadow-none">
                Livros Cadastrados
            </a>
        </div>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>
}
@code {
    [Parameter]
    public bool IsEditMode { get; set; } = false;

    [Parameter]
    public int BookId { get; set; }

    [Parameter]
    public EventCallback<Book> OnValidBookSubmit { get; set; }

    [SupplyParameterFromForm]
    public Book? Book { get; set; }

    private string Title => IsEditMode ? $"Editar o livro {BookId}" : "Cadastre um novo Livro";

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode)
        {
            Book ??= await Repository.GetByIdAsync(BookId);
        }
        else
        {
            Book ??= new();
        }
    }

    private async Task AddOrEditBook()
    {
        await OnValidBookSubmit.InvokeAsync(Book);
    }

}
